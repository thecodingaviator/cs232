library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity adder_tb is
end entity;

architecture sim of adder_tb is
    signal a, b: UNSIGNED (3 downto 0);
    signal c: UNSIGNED (4 downto 0);
    signal segments1, segments2: UNSIGNED (6 downto 0);
    
    component adder
        port
        (
            a: in UNSIGNED (3 downto 0);
            b: in UNSIGNED (3 downto 0);
            c: out UNSIGNED (4 downto 0)
        );
    end component;
    
    component hexdisplay
        port 
        (
            a       : in UNSIGNED (3 downto 0);
            segments: out UNSIGNED (6 downto 0)
        );
    end component;
    
begin

    uut: adder port map(a => a, b => b, c => c);
    hexdisplay1: hexdisplay port map(a => c(3 downto 0), segments => segments1);
    hexdisplay2: hexdisplay port map(a => "000" & c(4), segments => segments2);
    
    stim_proc: process
        variable va: UNSIGNED (3 downto 0);
        variable vb: UNSIGNED (3 downto 0);
    begin
        for i in 0 to 15 loop
            for j in 0 to 15 loop
                va := to_unsigned(i, 4);
                vb := to_unsigned(j, 4);
                
                a <= va;
                b <= vb;
                wait for 100 ns;
            end loop;
        end loop;
        wait;
    end process stim_proc;
    
end architecture sim;
